[{"/Users/leoqiu/apps/grpc-go/grpc-client/src/index.tsx":"1","/Users/leoqiu/apps/grpc-go/grpc-client/src/reportWebVitals.ts":"2","/Users/leoqiu/apps/grpc-go/grpc-client/src/App.tsx":"3","/Users/leoqiu/apps/grpc-go/grpc-client/src/sensorpb/sensor_pb.js":"4","/Users/leoqiu/apps/grpc-go/grpc-client/src/sensorpb/sensor_grpc_web_pb.js":"5"},{"size":500,"mtime":1608174996575,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1608174996576,"results":"8","hashOfConfig":"7"},{"size":1053,"mtime":1608183096799,"results":"9","hashOfConfig":"7"},{"size":8881,"mtime":1608180840094,"results":"10","hashOfConfig":"7"},{"size":5477,"mtime":1608183479168,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"meecup",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/leoqiu/apps/grpc-go/grpc-client/src/index.tsx",[],["25","26"],"/Users/leoqiu/apps/grpc-go/grpc-client/src/reportWebVitals.ts",[],"/Users/leoqiu/apps/grpc-go/grpc-client/src/App.tsx",["27"],"import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst { SensorRequest, SensorResponse  } = require(\"./sensorpb/sensor_pb\")\nconst { SensorClient  } = require(\"./sensorpb/sensor_grpc_web_pb\")\n\nvar client = new SensorClient('http://localhost:8000')\n\nexport const App = () => {\n  const [temp, setTemp] = useState(-9999);\n  const [humidity , setHumidity] = useState(-99999)\n\n  const getTemp = () => {\n    console.log(\"called\")\n\n    var sensorRequest = new SensorRequest()\n    var stream = client.tempSensor(sensorRequest,{})\n\n    stream.on('data', (response: any) =>{\n        setTemp(response.getValue())\n    });\n  };\n\n  const getHumidity = () => {\n    var sensorRequest = new SensorRequest()\n    var stream = client.humiditySensor(sensorRequest,{})\n\n    stream.on('data',(response: any) => {\n      setHumidity(response.getValue())\n    })\n  }\n\n  useEffect(()=>{\n    getTemp()\n    getHumidity()\n  },[]);\n\n  return (\n    <div>\n      Temperature : {temp} F\n      <br/>\n      Humidity : {humidity} %\n    </div>\n  );\n}\n\nexport default App;\n","/Users/leoqiu/apps/grpc-go/grpc-client/src/sensorpb/sensor_pb.js",[],["28","29"],"/Users/leoqiu/apps/grpc-go/grpc-client/src/sensorpb/sensor_grpc_web_pb.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":4,"column":24,"nodeType":"36","messageId":"37","endLine":4,"endColumn":38},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"@typescript-eslint/no-unused-vars","'SensorResponse' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]