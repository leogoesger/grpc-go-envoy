// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	ReadMsg(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	WriteMsg(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Message, error)
	StreamLstMsg(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Chat_StreamLstMsgClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) ReadMsg(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/chat.Chat/ReadMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) WriteMsg(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.Chat/WriteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) StreamLstMsg(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Chat_StreamLstMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/chat.Chat/StreamLstMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatStreamLstMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_StreamLstMsgClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatStreamLstMsgClient struct {
	grpc.ClientStream
}

func (x *chatStreamLstMsgClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations should embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	ReadMsg(context.Context, *ReadRequest) (*ReadResponse, error)
	WriteMsg(context.Context, *WriteRequest) (*Message, error)
	StreamLstMsg(*ReadRequest, Chat_StreamLstMsgServer) error
}

// UnimplementedChatServer should be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) ReadMsg(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMsg not implemented")
}
func (UnimplementedChatServer) WriteMsg(context.Context, *WriteRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMsg not implemented")
}
func (UnimplementedChatServer) StreamLstMsg(*ReadRequest, Chat_StreamLstMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLstMsg not implemented")
}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_ReadMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ReadMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/ReadMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ReadMsg(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_WriteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).WriteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/WriteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).WriteMsg(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_StreamLstMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).StreamLstMsg(m, &chatStreamLstMsgServer{stream})
}

type Chat_StreamLstMsgServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatStreamLstMsgServer struct {
	grpc.ServerStream
}

func (x *chatStreamLstMsgServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadMsg",
			Handler:    _Chat_ReadMsg_Handler,
		},
		{
			MethodName: "WriteMsg",
			Handler:    _Chat_WriteMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLstMsg",
			Handler:       _Chat_StreamLstMsg_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc-go/chat/v1/chat.proto",
}
